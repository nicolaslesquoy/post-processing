def init_log(path_to_log) -> None:
        try:
            with open(path_to_log,"w") as f:
                f.write("Log file for image processing pipeline\n")
        except:
            raise Exception("Log creation failed")
        return None
    
    def clear_log(path_to_log) -> None:
        try:
            with open(path_to_log,"w") as f:
                f.write("")
        except:
            raise Exception("Log clear failed")
        return None
    
    def to_log(self,path_to_log) -> None:
        try:
            with open(path_to_log,"a") as f:
                f.write("".join(str(self),"\n"))
        except:
            raise Exception("Log failed")
        return None

    
    """ # Extract SIFT features from the large regions
sift = cv2.xfeatures2d.SIFT_create()
large_region_features = []
for rect in large_regions:
    x, y, w, h = rect
    region = img[y:y+h, x:x+w]
    gray_region = cv2.cvtColor(region, cv2.COLOR_BGR2GRAY)
    keypoints, descriptors = sift.detectAndCompute(gray_region, None)
    large_region_features.append(descriptors)

# Define the reference features
reference_features = large_region_features[0]

# Compare the features of each large region to the reference features
matches = []
for i in range(len(large_regions)):
    similarity = cv2.compareHist(reference_features, large_region_features[i], cv2.HISTCMP_CORREL)
    matches.append((i, similarity))

# Sort the matches by similarity
matches.sort(key=lambda x: x[1], reverse=True)

# Select the most interesting regions
num_interesting_regions = 3
interesting_regions = []
for i in range(num_interesting_regions):
    index = matches[i][0]
    interesting_regions.append(large_regions[index])"""

""" # img = np.asarray(Image.open(path_to_calibration / "3.jpg"))
# img = cv2.rotate(img, cv2.ROTATE_180)
# plt.imshow(img)
# plt.show()

with open(path_to_calibration_result, "r") as f:
    calibration_result = json.load(f)

for key, value in calibration_result.items():
    value = np.array(value)
    # print(value[:,0])
    # print(value[:,1])
    plt.scatter(value[:,0], value[:,1],marker="x")
    for i in range(len(value)):
        plt.text(value[i,0], value[i,1], key)
plt.savefig("test_image.jpg")
plt.clf()

# print(calibration_result)
liste_p1,liste_p2,liste_p3,liste_p4 = [],[],[],[]
for key, value in calibration_result.items():
    liste_p1.append(value[0])
    liste_p2.append(value[1])
    liste_p3.append(value[2])
    liste_p4.append(value[3])
arr_p1 = np.array(liste_p1)
arr_p2 = np.array(liste_p2)
arr_p3 = np.array(liste_p3)
arr_p4 = np.array(liste_p4)

# for path in path_to_calibration.iterdir():
#     if path.is_file():
#         name = path.stem
#         fig,ax = plt.subplots()
#         img = np.asarray(Image.open(path))
#         img = cv2.rotate(img, cv2.ROTATE_180)
#         ax.imshow(img)
#         ax.set_title(name)
#         plt.show()

points_0 = [[None,None],[1639,2790],[3477,2790],[None,None]]
points_1 = [[None,None],[1649,2363],[3407,2363],[None,None]]
points_8 = [[1916,873],[None,None],[None,None],[3011,860]]
liste_p1.append(points_0[0])
liste_p1.append(points_1[0])
liste_p2.append(points_0[1])
liste_p2.append(points_1[1])
liste_p3.append(points_8[0])
liste_p3.append(points_8[1])

def func(x, a, b):
    return a * x + b

popt_p1, pcov_p1 = curve_fit(func, arr_p1[:,0], arr_p1[:,1])
popt_p2, pcov_p2 = curve_fit(func, arr_p2[:,0], arr_p2[:,1])
popt_p3, pcov_p3 = curve_fit(func, arr_p3[:,0], arr_p3[:,1])
popt_p4, pcov_p4 = curve_fit(func, arr_p4[:,0], arr_p4[:,1])

# print(popt_p1,pcov_p1)

plt.plot(arr_p1[:,0], arr_p1[:,1], 'o', label='data_1')
plt.plot(arr_p2[:,0], arr_p2[:,1], 'o', label='data_2')
plt.plot(arr_p3[:,0], arr_p3[:,1], 'o', label='data_3')
plt.plot(arr_p4[:,0], arr_p4[:,1], 'o', label='data_4')
plt.plot(arr_p1[:,0], func(arr_p1[:,0], *popt_p1), 'r-', label='fit_1')
plt.plot(arr_p2[:,0], func(arr_p2[:,0], *popt_p2), 'r-', label='fit_2')
plt.plot(arr_p3[:,0], func(arr_p3[:,0], *popt_p3), 'r-', label='fit_3')
plt.plot(arr_p4[:,0], func(arr_p4[:,0], *popt_p4), 'r-', label='fit_4')
plt.legend()
plt.savefig("test_reg.jpg")
plt.clf()

calibration_measures = {
    "0": 0,
    "1": 2.7,
    "2": 5.5,
    "3": 9.9,
    "4": 14.1,
    "5": 17.7,
    "6": 20.8,
    "7": 23.8,
    "8": 28.3
}

liste_p1_dist_x,liste_p1_dist_y = [],[] # en bas à gauche
liste_p2_dist_x,liste_p2_dist_y = [],[] # en haut à gauche
liste_p3_dist_x,liste_p3_dist_y = [],[] # en haut à droite
liste_p4_dist_x,liste_p4_dist_y = [],[] # en bas à droite

calibration_result["0"] = points_0
calibration_result["1"] = points_1
calibration_result["8"] = points_8

for key, value in calibration_measures.items():
    calibration_result[key].append(value)

print(calibration_result) 

for key, value in calibration_result.items():
    if key not in ["0","1","8"]:
        liste_p1_dist_x.append([value[len(value) - 1],value[0][0]])
        liste_p1_dist_y.append([value[len(value) - 1],value[0][1]])
        liste_p2_dist_x.append([value[len(value) - 1],value[1][0]])
        liste_p2_dist_y.append([value[len(value) - 1],value[1][1]])
        liste_p3_dist_x.append([value[len(value) - 1],value[2][0]])
        liste_p3_dist_y.append([value[len(value) - 1],value[2][1]])
        liste_p4_dist_x.append([value[len(value) - 1],value[3][0]])
        liste_p4_dist_y.append([value[len(value) - 1],value[3][1]])
    elif key == "0" or key == "1":
        liste_p2_dist_x.append([value[len(value) - 1],value[1][0]])
        liste_p2_dist_y.append([value[len(value) - 1],value[1][1]])
        liste_p3_dist_x.append([value[len(value) - 1],value[2][0]])
        liste_p3_dist_y.append([value[len(value) - 1],value[2][1]])
    elif key == "8":
        liste_p1_dist_x.append([value[len(value) - 1],value[0][0]])
        liste_p1_dist_y.append([value[len(value) - 1],value[0][1]])
        liste_p4_dist_x.append([value[len(value) - 1],value[3][0]])
        liste_p4_dist_y.append([value[len(value) - 1],value[3][1]])
    else:
        raise Exception("Error")

arr_p1_dist_x = np.array(liste_p1_dist_x)
arr_p1_dist_y = np.array(liste_p1_dist_y)
arr_p2_dist_x = np.array(liste_p2_dist_x)
arr_p2_dist_y = np.array(liste_p2_dist_y)
arr_p3_dist_x = np.array(liste_p3_dist_x)
arr_p3_dist_y = np.array(liste_p3_dist_y)
arr_p4_dist_x = np.array(liste_p4_dist_x)
arr_p4_dist_y = np.array(liste_p4_dist_y)

# print(arr_p2_dist_y)
# print(arr_p3_dist_y)

popt_p1_dist_x, pcov_p1_dist_x = curve_fit(func, arr_p1_dist_x[:,0], arr_p1_dist_x[:,1])
popt_p1_dist_y, pcov_p1_dist_y = curve_fit(func, arr_p1_dist_y[:,0], arr_p1_dist_y[:,1])
popt_p2_dist_x, pcov_p2_dist_x = curve_fit(func, arr_p2_dist_x[:,0], arr_p2_dist_x[:,1])
popt_p2_dist_y, pcov_p2_dist_y = curve_fit(func, arr_p2_dist_y[:,0], arr_p2_dist_y[:,1])
popt_p3_dist_x, pcov_p3_dist_x = curve_fit(func, arr_p3_dist_x[:,0], arr_p3_dist_x[:,1])
popt_p3_dist_y, pcov_p3_dist_y = curve_fit(func, arr_p3_dist_y[:,0], arr_p3_dist_y[:,1])
popt_p4_dist_x, pcov_p4_dist_x = curve_fit(func, arr_p4_dist_x[:,0], arr_p4_dist_x[:,1])
popt_p4_dist_y, pcov_p4_dist_y = curve_fit(func, arr_p4_dist_y[:,0], arr_p4_dist_y[:,1])

#plt.plot(arr_p1_dist_x[:,0], arr_p1_dist_x[:,1], 'o', label='data_x1')
#plt.plot(arr_p1_dist_y[:,0], arr_p1_dist_y[:,1], 'o', label='data_y1')
plt.plot(arr_p2_dist_x[:,0], arr_p2_dist_x[:,1], 'o', label='data_x2')
plt.plot(arr_p2_dist_y[:,0], arr_p2_dist_y[:,1], 'o', label='data_y2')
plt.plot(arr_p3_dist_x[:,0], arr_p3_dist_x[:,1], 'o', label='data_x3')
plt.plot(arr_p3_dist_y[:,0], arr_p3_dist_y[:,1], 'o', label='data_y3')
#plt.plot(arr_p4_dist_x[:,0], arr_p4_dist_x[:,1], 'o', label='data_x4')
#plt.plot(arr_p4_dist_y[:,0], arr_p4_dist_y[:,1], 'o', label='data_y4')
#plt.plot(arr_p1_dist_x[:,0], func(arr_p1_dist_x[:,0], *popt_p1_dist_x), 'r-', label='fit_x1')
#plt.plot(arr_p1_dist_y[:,0], func(arr_p1_dist_y[:,0], *popt_p1_dist_y), 'r-', label='fit_y1')
plt.plot(arr_p2_dist_x[:,0], func(arr_p2_dist_x[:,0], *popt_p2_dist_x), 'r-', label='fit_x2')
plt.plot(arr_p2_dist_y[:,0], func(arr_p2_dist_y[:,0], *popt_p2_dist_y), 'r-', label='fit_y2')
plt.plot(arr_p3_dist_x[:,0], func(arr_p3_dist_x[:,0], *popt_p3_dist_x), 'r-', label='fit_x3')
plt.plot(arr_p3_dist_y[:,0], func(arr_p3_dist_y[:,0], *popt_p3_dist_y), 'r-', label='fit_y3')
#plt.plot(arr_p4_dist_x[:,0], func(arr_p4_dist_x[:,0], *popt_p4_dist_x), 'r-', label='fit_x4')
#plt.plot(arr_p4_dist_y[:,0], func(arr_p4_dist_y[:,0], *popt_p4_dist_y), 'r-', label='fit_y4')
plt.legend(loc="best")
plt.savefig("test_reg_dist.jpg")
plt.clf()
 """

# liste_distance = [float(value) for key, value in calibration_measures.items()]
# print(liste_distance)

# Nouvelle version

    # Cleaning functions

"""     def clear_intermediary_file(path_to_intermediary_file: pathlib.Path) -> bool:
        if path_to_intermediary_file.exists():
            path_to_intermediary_file.unlink()
            return True
        else:
            return False """

# def create_random_row():
#     """Create a random row for the dataframe."""
#     row = []
#     result = {}
#     for i in range(6):
#         row.append([np.random.randint(0,1000),np.random.randint(0,1000)])
#     nm = ''.join(random.choices(string.ascii_lowercase, k=5))
#     dt = np.random.randint(0,1000)
#     return {"name": nm,"points": row,"distance":dt}

# def create_random_dataframe():
#     """Create a random dataframe."""
#     df_dict = {}
#     for i in range(10):
#         result_int = create_random_row()
#         name = result_int[list(result_int.keys())[0]]
#         df_dict[name] = result_int
#     print(len(df_dict))
#     keys = list(df_dict.keys())
#     keys.sort()
#     df_dict = {key: df_dict[key] for key in keys}
#     df = pd.DataFrame.from_dict(df_dict,orient="index")
#     return df


    # def create_sanity_check(data: pd.DataFrame) -> None:
    #     """Create a sanity check image of all founds coreners"""# for i in range(len(df.index)):
    #     for i in range(len(data.index)):
    #         row = data.iloc[i]
    #         # TODO Create function to convert the row to np array for plotting
    #         row_array = row.values.tolist()[0:len(row)-1]
    #         for j in range(len(row_array)):
    #             if row_array[j] == None:
    #                 row_array[j] = [None,None]
    #         row_array = np.array(row_array,dtype=np.float32)
    #         plt.scatter(row_array[:,0], row_array[:,1],marker="x",label=f"Image {i}")
    #     plt.legend(loc="best")    
    #     plt.savefig("test/sanity_check.png")




        #         result_intx,result_inty = np.array(result_intx,dtype=np.float32),np.array(result_inty,dtype=np.float32)
        #         plt.scatter(result_intx[:,0],result_intx[:,1],marker="x")
        #         for i in range(len(result_intx)):
        #             plt.annotate(f"i={informations[0]};n°{i}",(result_intx[i,0],result_intx[i,1]),textcoords="offset points",xytext=(0,-5),fontsize=6)
        # plt.show()
                
        #         result_x.append(result_intx)
        #         result_y.append(result_inty)
        #         print(result_intx)
        # result_x,result_y = np.array(result_x,dtype=np.float32),np.array(result_y,dtype=np.float32)
            
                # plt.scatter(result_intx[:,0],result_intx[:,1],label="x")
                # for i in range(len(result_intx)):
                #     plt.annotate(f"d={int(result_intx[i,0])};n°{i}",(result_intx[i,0],result_intx[i,1]),textcoords="offset points",xytext=(0,-5),fontsize=6)
                # plt.savefig("x.png")
                # plt.clf()

                # plt.scatter(result_inty[:,0],result_inty[:,1],label="y")
                # for i in range(len(result_inty)):
                #     plt.annotate(f"d={int(result_inty[i,0])};n°{i}",(result_inty[i,0],result_inty[i,1]),textcoords="offset points",xytext=(0,-5),fontsize=6)
                # plt.savefig("y.png")
                # plt.clf()
            # plt.scatter(x,y,marker="x")
            # plt.annotate(f"d={int(distance)};n°{i}",(x,y),textcoords="offset points",xytext=(0,-5),fontsize=6)
    
    # def plot_vortex_positions(result_dataframe: pd.DataFrame, conversion: list):
    #     dx,dy = conversion[0],conversion[1]
    #     # iterate over rows of df:
    #     result_dict = {"15": {"x": [], "y": []}, "20": {"x": [], "y": []}, "25": {"x": [], "y": []}}
    #     for index, row in result_dataframe.iterrows():
    #         result_x, result_y = [],[]
    #         name = row["name"]
    #         informations = name.split("-")
    #         distance = calibration_positions["pic" + informations[2]]
    #         print(distance)
    #         center = row["center"]
    #         rectangle = row["rectangle"]
    #         vortex_position = Analysis.get_vortex_position(center,rectangle)
    #         if vortex_position != None:
    #             x,y = abs(vortex_position[0]),abs(vortex_position[1])
    #             x,y = x*dx,y*dy
    #             result_x.append([distance,x])
    #             result_y.append([distance,y])
    #             result_dict[informations[0]]["x"].append([distance,x])
    #             result_dict[informations[0]]["y"].append([distance,y])
    #     for key in result_dict:
    #         result_x = np.array(result_dict[key]["x"])
    #         plt.scatter(result_x[:,0],result_x[:,1],label=key)
    #     plt.legend(loc="best",fontsize = "small")
    #     plt.title("Distance from center (x)")
    #     plt.xlabel("x [cm]")
    #     plt.ylabel("Distance from center (x) [cm]")
    #     plt.savefig("x.png")
    #     plt.clf()
    #     for key in result_dict:
    #         result_y = np.array(result_dict[key]["y"])
    #         plt.scatter(result_y[:,0],result_y[:,1],label=key)
    #     plt.legend(loc="best",fontsize = "small")
    #     plt.title("Distance from center (y)")
    #     plt.xlabel("x [cm]")
    #     plt.ylabel("Distance from center (y) [cm]")
    #     plt.savefig("y.png")
    #     plt.clf()

    #     fig = plt.figure()
    #     ax = fig.add_subplot(projection='3d')
    #     for key in result_dict:
    #         result_x = np.array(result_dict[key]["x"])
    #         result_y = np.array(result_dict[key]["y"])
    #         x = result_x[:,0]
    #         y = result_x[:,1]
    #         z = result_y[:,1]
    #         ax.scatter(x,y,z,label=key)
    #     ax.set_xlabel("x [cm]")
    #     ax.set_ylabel("dist. from center (x) [cm]")
    #     ax.set_zlabel("dist. from center (y) [cm]")
    #     plt.savefig("3d.png")


    """
{'15': [{'label': '15/0/x', 'data': [[9.9, 2.8539834359189125]]}, {'label': '15/0/y', 'data': [[9.9, 0.3490370274886482]]}, 
{'label': '15/0/x', 'data': [[14.1, 4.60851148851149]]}, 
{'label': '15/0/y', 'data': [[14.1, 0.586933066933068]]}, 
{'label': '15/0/x', 'data': [[17.7, 5.841461764042402], [17.7, 0.04960716702652917]]}, 
{'label': '15/0/y', 'data': [[17.7, 1.003828687441594], [17.7, 0.06908343269634087]]}, 
{'label': '15/0/x', 'data': [[20.8, 6.884898327478959], [20.8, 0.006130643550009154]]}, 
{'label': '15/0/y', 'data': [[20.8, 1.565677161548133], [20.8, 0.17442841029938336]]},
{'label': '15/0/x', 'data': [[23.8, 7.766830588766066]]}, 
{'label': '15/0/y', 'data': [[23.8, 1.248939705455839]]}], 
'20': [{'label': '20/0/x', 'data': [[9.9, 2.4533582546485695]]}, 
{'label': '20/0/y', 'data': [[9.9, 0.3118316522187524]]}, 
{'label': '20/0/x', 'data': [[14.1, 4.083727885018197]]}, 
{'label': '20/0/y', 'data': [[14.1, 0.736979407689089]]}, 
{'label': '20/0/x', 'data': [[17.7, 5.173706293706291]]}, 
{'label': '20/0/y', 'data': [[17.7, 1.195604395604396]]}, 
{'label': '20/0/x', 'data': [[20.8, 6.347572427572422]]}, 
{'label': '20/0/y', 'data': [[20.8, 1.6303696303696324]]}], 
'25': [{'label': '25/0/x', 'data': [[9.9, 2.1396861203312665]]}, 
{'label': '25/0/y', 'data': [[9.9, 0.28089742515549687]]}, 
{'label': '25/0/x', 'data': [[14.1, 3.5433366633366585]]}, 
{'label': '25/0/y', 'data': [[14.1, 0.9130069930069954]]}, 
{'label': '25/0/x', 'data': [[17.7, 4.723473945409423]]}, 
{'label': '25/0/y', 'data': [[17.7, 1.4695281492700907]]}]}

"""
